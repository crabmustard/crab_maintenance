// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rooms.sql

package database

import (
	"context"
	"database/sql"
)

const addRoomGuest = `-- name: AddRoomGuest :exec
UPDATE rooms
SET guest = ?,
occupied = 1
WHERE room = ?
`

type AddRoomGuestParams struct {
	Guest sql.NullString `json:"guest"`
	Room  int64          `json:"room"`
}

func (q *Queries) AddRoomGuest(ctx context.Context, arg AddRoomGuestParams) error {
	_, err := q.db.ExecContext(ctx, addRoomGuest, arg.Guest, arg.Room)
	return err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
  room, layout, guest, occupied
) VALUES (
  ?, ?, ?, ?
)
RETURNING room, layout, guest, occupied
`

type CreateRoomParams struct {
	Room     int64          `json:"room"`
	Layout   string         `json:"layout"`
	Guest    sql.NullString `json:"guest"`
	Occupied int64          `json:"occupied"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.Room,
		arg.Layout,
		arg.Guest,
		arg.Occupied,
	)
	var i Room
	err := row.Scan(
		&i.Room,
		&i.Layout,
		&i.Guest,
		&i.Occupied,
	)
	return i, err
}

const getAllRooms = `-- name: GetAllRooms :many
SELECT room, layout, guest, occupied FROM rooms
`

func (q *Queries) GetAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.Room,
			&i.Layout,
			&i.Guest,
			&i.Occupied,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT room, layout, guest, occupied FROM rooms
WHERE room = ?
`

func (q *Queries) GetRoom(ctx context.Context, room int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, room)
	var i Room
	err := row.Scan(
		&i.Room,
		&i.Layout,
		&i.Guest,
		&i.Occupied,
	)
	return i, err
}

const removeRoomGuest = `-- name: RemoveRoomGuest :exec
UPDATE rooms
SET guest = ?,
occupied = 0
WHERE room = ?
`

type RemoveRoomGuestParams struct {
	Guest sql.NullString `json:"guest"`
	Room  int64          `json:"room"`
}

func (q *Queries) RemoveRoomGuest(ctx context.Context, arg RemoveRoomGuestParams) error {
	_, err := q.db.ExecContext(ctx, removeRoomGuest, arg.Guest, arg.Room)
	return err
}
