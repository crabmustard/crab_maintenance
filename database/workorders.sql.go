// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workorders.sql

package database

import (
	"context"
)

const closeWorkOrder = `-- name: CloseWorkOrder :exec
UPDATE workorders
SET is_closed = 1
WHERE id = ?
`

func (q *Queries) CloseWorkOrder(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, closeWorkOrder, id)
	return err
}

const createWorkOrder = `-- name: CreateWorkOrder :one
INSERT INTO workorders (
  id, room, is_closed, code, problem
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, room, is_closed, code, problem
`

type CreateWorkOrderParams struct {
	ID       interface{} `json:"id"`
	Room     int64       `json:"room"`
	IsClosed int64       `json:"is_closed"`
	Code     int64       `json:"code"`
	Problem  string      `json:"problem"`
}

func (q *Queries) CreateWorkOrder(ctx context.Context, arg CreateWorkOrderParams) (Workorder, error) {
	row := q.db.QueryRowContext(ctx, createWorkOrder,
		arg.ID,
		arg.Room,
		arg.IsClosed,
		arg.Code,
		arg.Problem,
	)
	var i Workorder
	err := row.Scan(
		&i.ID,
		&i.Room,
		&i.IsClosed,
		&i.Code,
		&i.Problem,
	)
	return i, err
}

const getAllWorkOrders = `-- name: GetAllWorkOrders :many
SELECT id, room, is_closed, code, problem FROM workorders
`

func (q *Queries) GetAllWorkOrders(ctx context.Context) ([]Workorder, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workorder
	for rows.Next() {
		var i Workorder
		if err := rows.Scan(
			&i.ID,
			&i.Room,
			&i.IsClosed,
			&i.Code,
			&i.Problem,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkOrder = `-- name: GetWorkOrder :one
SELECT id, room, is_closed, code, problem FROM workorders
WHERE id = ?
`

func (q *Queries) GetWorkOrder(ctx context.Context, id interface{}) (Workorder, error) {
	row := q.db.QueryRowContext(ctx, getWorkOrder, id)
	var i Workorder
	err := row.Scan(
		&i.ID,
		&i.Room,
		&i.IsClosed,
		&i.Code,
		&i.Problem,
	)
	return i, err
}
