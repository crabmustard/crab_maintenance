// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ptacs.sql

package database

import (
	"context"
)

const clearPtacList = `-- name: ClearPtacList :exec
DELETE FROM ptacs
`

func (q *Queries) ClearPtacList(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearPtacList)
	return err
}

const createPtac = `-- name: CreatePtac :one
INSERT INTO ptacs (room, brand, model, last_service)
VALUES (
    ?,
    ?,
    ?,
    ?
)
RETURNING room, brand, model, last_service
`

type CreatePtacParams struct {
	Room        string `json:"room"`
	Brand       string `json:"brand"`
	Model       string `json:"model"`
	LastService string `json:"last_service"`
}

func (q *Queries) CreatePtac(ctx context.Context, arg CreatePtacParams) (Ptac, error) {
	row := q.db.QueryRowContext(ctx, createPtac,
		arg.Room,
		arg.Brand,
		arg.Model,
		arg.LastService,
	)
	var i Ptac
	err := row.Scan(
		&i.Room,
		&i.Brand,
		&i.Model,
		&i.LastService,
	)
	return i, err
}

const getAllPtac = `-- name: GetAllPtac :many
SELECT room, brand, model, last_service FROM ptacs
ORDER BY room
`

func (q *Queries) GetAllPtac(ctx context.Context) ([]Ptac, error) {
	rows, err := q.db.QueryContext(ctx, getAllPtac)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ptac
	for rows.Next() {
		var i Ptac
		if err := rows.Scan(
			&i.Room,
			&i.Brand,
			&i.Model,
			&i.LastService,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPtacCount = `-- name: GetPtacCount :one
SELECT COUNT(room) FROM ptacs
`

func (q *Queries) GetPtacCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPtacCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPtacRoom = `-- name: GetPtacRoom :one
SELECT room, brand, model, last_service FROM ptacs WHERE room = ?
`

func (q *Queries) GetPtacRoom(ctx context.Context, room string) (Ptac, error) {
	row := q.db.QueryRowContext(ctx, getPtacRoom, room)
	var i Ptac
	err := row.Scan(
		&i.Room,
		&i.Brand,
		&i.Model,
		&i.LastService,
	)
	return i, err
}

const getPtacsSorted = `-- name: GetPtacsSorted :many
SELECT room, brand, model, last_service FROM ptacs
`

func (q *Queries) GetPtacsSorted(ctx context.Context) ([]Ptac, error) {
	rows, err := q.db.QueryContext(ctx, getPtacsSorted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ptac
	for rows.Next() {
		var i Ptac
		if err := rows.Scan(
			&i.Room,
			&i.Brand,
			&i.Model,
			&i.LastService,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPtacsToClean = `-- name: GetPtacsToClean :many
;

SELECT room, brand, model, last_service FROM ptacs
ORDER BY last_service ASC
LIMIT ?
`

func (q *Queries) GetPtacsToClean(ctx context.Context, limit int64) ([]Ptac, error) {
	rows, err := q.db.QueryContext(ctx, getPtacsToClean, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ptac
	for rows.Next() {
		var i Ptac
		if err := rows.Scan(
			&i.Room,
			&i.Brand,
			&i.Model,
			&i.LastService,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
